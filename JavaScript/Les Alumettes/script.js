// √âtape 1 ‚Äî Fonction d‚Äôattaque
// But : cr√©er la fonction qui applique des d√©g√¢ts aux PV du monstre.

// Entr√©es : remainingPv , damages
// Sortie : nouveau nombre de PV

function attack(remainingPv, damages) {
  return remainingPv - damages; // retourner directement le calcul des points de vie restants avec les d√©gats que l'on veut infliger
}

// √âtape 2 ‚Äî Demander les d√©g√¢ts au joueur (boucle)
// But : tant que le monstre a des PV, demander au joueur combien il souhaite infliger.

// Cr√©er askDamages(player) qui :
// affiche prompt("Joueur X, combien de d√©g√¢ts ? (1-6)")
// convertit en nombre et retourne le nombre (sans validation ici entre 1 et 6).
// Boucle qui :
// appelle askDamages
// appelle attack pour mettre √† jour les PV
// affiche l‚Äô√©tat (console.log ou alert) apr√®s chaque attaque

function askDamages(player) {
  let playerPrompt = ""; // initialiser la variable qui stockera le prompt
  // ici on fait une boucle "do.. while" car on veut forcer l'utilisateur √† entrer un chiffre entre 1 et 6
  do {
    playerPrompt = Number.parseInt(
      prompt(
        `Player ${player}, how many damages would you like to inflige ? (1-6)`
      )
    ); // on demande √† l'utilisateur
  } while (playerPrompt < 0 || playerPrompt > 7 || isNaN(playerPrompt)); // tant que le prompt n'est pas correct
  return playerPrompt;
}

function play() {
  let monsterPv = 50; // on initialise les points de vie de monstre
  let player = 1; // on initialise le joueur actif

  while (monsterPv > 0) {
    // ici on fait une boucle while car on sait combien de fois on va it√©rer (on l'occurence 50, car le monstre √† 50 points de vie)
    let damages = askDamages(player); // on appelle et on stocke les points de d√©gats que le joueur veut infliger (ici, damages vaut entre 1 et 6 donc)
    monsterPv = attack(monsterPv, damages); // on actualise les points de vie du monstre gr√¢ce √† notre fonction (ex : monsterPv = 50 - 4)
    if ((player = 1)) {
      // petite condition pour changer de joueur si le joueur est 1 alors le changer √† deux car il vient de jouer
      player = 2;
    } else {
      // si ce n'est pas le joueur 1 √ßa veut dire que le joueur 2 vient de jouer donc repasser au joueur 1
      player = 1;
    }
    // player = 1 ? 2 : 1; version ternaire
    if (monsterPv <= 0) {
      // g√©rer la victoire et la mort du monstre
      alert(`üéâPlayer ${player} won !`);
      break; // permet d'arr√™ter la boucle d√®s que les PV sont √† 0
    }
  }
}

play(); // appeller la fonction

// √âtape 3 ‚Äî Validation des entr√©es (1 √† 6) + d√©tection de victoire
// But : s‚Äôassurer que le joueur choisit un entier entre 1 et 6 et g√©rer la victoire.

// Impl√©menter askDamages(player) :
// boucle qui redemande tant que l‚Äôentr√©e est NaN ou hors intervalle [1,6]
// retourne un entier valide

// Dans la boucle principale :
// apr√®s attack, v√©rifier if (pv <= 0) ‚Üí afficher Joueur X a vaincu le monstre ! et terminer la partie.

// √âtape 4 ‚Äî Deux joueurs (alternance de tours)
// But : g√©rer l‚Äôalternance entre 2 joueurs.
